
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author CriCr
 */
public class Registration_form extends javax.swing.JFrame {

    /**
     * Creates new form Registration_form
     */
    public Registration_form() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        BtnSubmit = new javax.swing.JButton();
        BtnClear = new javax.swing.JButton();
        TxtName = new javax.swing.JTextField();
        TxtEmail = new javax.swing.JTextField();
        TxtCountry = new javax.swing.JTextField();
        TxtPhoneNumber = new javax.swing.JTextField();
        TxtState = new javax.swing.JTextField();
        PfPassword = new javax.swing.JPasswordField();
        PfConPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Name:");

        jLabel2.setText("Email-ID:");

        jLabel3.setText("Create Password:");

        jLabel4.setText("Confrim Password:");

        jLabel5.setText("Country:");

        jLabel6.setText("State:");

        jLabel7.setText("Phone Number:");

        BtnSubmit.setText("Submit");
        BtnSubmit.setName("BtnSubmit"); // NOI18N
        BtnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnSubmitActionPerformed(evt);
            }
        });

        BtnClear.setText("Clear");
        BtnClear.setName("BtnClear"); // NOI18N
        BtnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnClearActionPerformed(evt);
            }
        });

        TxtName.setName("TxtName"); // NOI18N

        TxtEmail.setName("TxtEmail"); // NOI18N

        TxtCountry.setName("TxtCountry"); // NOI18N

        TxtPhoneNumber.setName("TxtPhoneNumber"); // NOI18N

        TxtState.setName("TxtState"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TxtPhoneNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(TxtCountry, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(TxtEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(TxtName)
                    .addComponent(TxtState, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                    .addComponent(PfPassword)
                    .addComponent(PfConPassword, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BtnSubmit)
                .addGap(12, 12, 12)
                .addComponent(BtnClear)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(PfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(PfConPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TxtCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TxtState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TxtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnSubmit)
                    .addComponent(BtnClear))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnClearActionPerformed
       //set text fields to empty
        TxtName.setText("");
        TxtEmail.setText("");
        TxtCountry.setText("");
        TxtState.setText("");
        TxtPhoneNumber.setText("");
        PfPassword.setText("");
        PfConPassword.setText("");
    }//GEN-LAST:event_BtnClearActionPerformed

    private void BtnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnSubmitActionPerformed
        if(TxtName!= null || TxtEmail != null || TxtCountry != null 
                || TxtState != null || TxtPhoneNumber != null){
            if(CheckPassword() && CheckName() && CheckCountry() && CheckState()
                    && CheckPhoneNumber() && CheckEmail()){
                JOptionPane.showMessageDialog(null, "Data Saved Succefully");
            }
            else{
                JOptionPane.showMessageDialog(null, "Data was not"
                        + " Saved Succefully");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "one or more field is empty!");
        }
    }//GEN-LAST:event_BtnSubmitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registration_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registration_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registration_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registration_form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registration_form().setVisible(true);
            }
        });
    }

    private boolean CorrectPassword;
    private boolean CheckPassword(){
       char[] password = PfPassword.getPassword(); 
       char[] conPassword = PfConPassword.getPassword(); 
       String sPassword = "";
       String sPasswordConfrim ="";
       if(password.length!= 8 || password.length < 20){
           if(conPassword.length != 8 || conPassword.length < 20){
               for(int i = 0; i < password.length; i++){
                   sPassword += password[i];
               }
               for(int j = 0; j < conPassword.length; j++){
                   sPasswordConfrim += conPassword[j];
               }
               if(PasswordHasNumbers(sPassword)){
                   if(PasswordHasNumbers(sPasswordConfrim)){
                       if(sPassword.equals(sPasswordConfrim)){
                           CorrectPassword = true;
                       }
                       else{
                           CorrectPassword = false;
                           JOptionPane.showMessageDialog(null,"the passwords "
                                   + "do not match!");
                       }
                   }else{
                       CorrectPassword = false;
                   }
               }else{
                   CorrectPassword = false;
               }
            }
           else{
               CorrectPassword = false;
               JOptionPane.showMessageDialog(null,"the passwords "
                                   + "is not long enough!");
           }
       }
       else{
               CorrectPassword = false;
               JOptionPane.showMessageDialog(null,"the passwords "
                                   + "is not long enough!");
       }
        return CorrectPassword;
    }
          
    private boolean PasswordHasNumbers(String password){
        Pattern pattern = Pattern.compile("(?=.*[0-9])$");
        Matcher match = pattern.matcher(password);
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the password field does not "
                    + "contain a single digit!");
            PasswordHasLowerCaseLetters(password);
        }
        return match.matches();
    }
    
    private boolean PasswordHasLowerCaseLetters(String password){
        Pattern pattern = Pattern.compile("(?=.*[a-z])$");
        Matcher match = pattern.matcher(password);
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the password field does not "
                    + "contain a single lower case letter!");
             PasswordHasUpperCaseLetters(password);
        }
        return match.matches();
    }

    private boolean PasswordHasUpperCaseLetters(String password){
        Pattern pattern = Pattern.compile("(?=.*[A-Z])$");
        Matcher match = pattern.matcher(password);
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the password field does not "
                    + "contain a single upper case letter!");
            PasswordHasSpecialCaseLetters(password);
        }
        return match.matches();
    }
    
    private boolean PasswordHasSpecialCaseLetters(String password){
        Pattern pattern = Pattern.compile("(?=.*[@#%^&-+=()])$");
        Matcher match = pattern.matcher(password);
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the password field does not "
                    + "contain a single Special case letter!");
        }
        return match.matches();
    }
    
    private boolean CheckField(String regexPattern, String type,
            javax.swing.JTextField control){
        Pattern pattern = Pattern.compile(regexPattern);
        Matcher match = pattern.matcher(control.getText());
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the "+ type +"is"
                    + "incorrectly validated");
        }
        return match.matches();
     }
    
     private boolean CheckField(String regexPattern, String type,
            javax.swing.JFormattedTextField control){
        Pattern pattern = Pattern.compile(regexPattern);
        Matcher match = pattern.matcher(control.getText());
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the "+ type +"is"
                    + "incorrectly validated");
        }
        return match.matches();
     }
    
     private boolean CheckName(){
        Pattern pattern = Pattern.compile("(.*)(\\\\d+)(.*)");
        Matcher match = pattern.matcher(TxtName.getText());
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the name field is"
                    + "incorrectly validated");
        }
        return match.matches();
     }
    
      private boolean CheckCountry(){
        Pattern pattern = Pattern.compile("(.*)(\\\\d+)(.*)");
        Matcher match = pattern.matcher(TxtCountry.getText());
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the country field is"
                    + "incorrectly validated");
        }
        return match.matches();
     }
     
      private boolean CheckState(){
        Pattern pattern = Pattern.compile("(.*)(\\\\d+)(.*)");
        Matcher match = pattern.matcher(TxtState.getText());
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the state field is"
                    + "incorrectly validated");
        }
        return match.matches();
     }
      
      private boolean CheckPhoneNumber(){
        Pattern pattern = Pattern.compile("^[+]*[(]{0,1}[0-9]{1,4}[)]" 
                + "{0,1}[-\\s\\./0-9]*$");
        Matcher match = pattern.matcher(TxtPhoneNumber.getText());
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the phone number field is"
                    + "incorrectly validated");
        }
        return match.matches();
      }
      
         private boolean CheckEmail(){
        Pattern pattern = Pattern.compile("^(?=.{1,254})(?=.{1,64}@.{1,255})"
                + "[A-Za-z0-9!#$%&'*+/=?^_`{|}~-]+(\\.[A-Za-z0-9!#$%&'*+/=?^_`"
                + "{|}~-]+)*@[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?"
                + "(\\.[A-Za-z0-9](?:[A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$");
        Matcher match = pattern.matcher(TxtEmail.getText());
        if(!match.matches()){
            JOptionPane.showMessageDialog(null, "the phone number field is"
                    + "incorrectly validated");
        }
        return match.matches();
      }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnClear;
    private javax.swing.JButton BtnSubmit;
    private javax.swing.JPasswordField PfConPassword;
    private javax.swing.JPasswordField PfPassword;
    private javax.swing.JTextField TxtCountry;
    private javax.swing.JTextField TxtEmail;
    private javax.swing.JTextField TxtName;
    private javax.swing.JTextField TxtPhoneNumber;
    private javax.swing.JTextField TxtState;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
